name: iOS â€” One-File Build & Check (Cordova, no signing)

on:
  workflow_dispatch:
    inputs:
      make_ipa:
        type: boolean
        default: false
        description: "Also package an UNSIGNED .ipa?"
  push:
    branches: [ appstore ]

env:
  APP_NAME: CEORater
  BUNDLE_ID: com.ceorater.www
  VERSION_NUMBER: "1.0"
  BUILD_NUMBER: "6"

jobs:
  build:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4

      # Pin a stable Xcode on macOS-14 (runners moved to 16.2)
      - name: Select Xcode 16.2
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Tool versions
        run: |
          xcodebuild -version
          /usr/bin/xcode-select -p
          node -v
          npm -v

      - name: Install Cordova CLI
        run: |
          npm i -g cordova@12
          cordova -v

      - name: Find web folder (first index.html)
        run: |
          set -e
          FOUND=$(git ls-files | grep -Ei '/?index\.html$' | grep -Ev 'node_modules|Pods' | head -n1 || true)
          [ -z "$FOUND" ] && { echo "No index.html found in repo."; exit 1; }
          echo "APP_WEB_DIR=$(dirname "$FOUND")" >> $GITHUB_ENV
          echo "Using APP_WEB_DIR=$(dirname "$FOUND")"

      - name: Create Cordova project
        run: cordova create app "$BUNDLE_ID" "$APP_NAME"

      - name: Set version/build (1.0 / 6)
        run: |
          CONFIG=app/config.xml
          /usr/bin/sed -i '' -E "s/version=\"[^\"]+\"/version=\"${VERSION_NUMBER}\"/" "$CONFIG"
          if ! grep -q 'ios-CFBundleVersion' "$CONFIG"; then
            /usr/bin/sed -i '' -E "s@</widget>@  <preference name=\"ios-CFBundleVersion\" value=\"${BUILD_NUMBER}\"/>\n</widget>@" "$CONFIG"
          else
            /usr/bin/sed -i '' -E "s/(name=\"ios-CFBundleVersion\" value=\")[^\"]+/\1${BUILD_NUMBER}/" "$CONFIG"
          fi

      - name: Copy web into app/www
        run: |
          rsync -a --delete "${APP_WEB_DIR}/" app/www/ 2>/dev/null || cp -R "${APP_WEB_DIR}/." app/www/

      - name: Allow network calls (whitelist)
        run: |
          cd app
          cordova plugin add cordova-plugin-whitelist
          if ! grep -q '<access origin=' config.xml; then
            /usr/bin/sed -i '' -E "s@</widget>@  <access origin=\"*\"/>\n  <allow-navigation href=\"*\"/>\n</widget>@" config.xml
          fi

      - name: Add iOS platform (pin cordova-ios 7.1.1) & force iPhone-only
        run: |
          cd app
          cordova platform add ios@7.1.1
          cordova platform ls
          PBXPROJ="platforms/ios/${APP_NAME}.xcodeproj/project.pbxproj"
          /usr/bin/sed -i '' -E 's/TARGETED_DEVICE_FAMILY = [^;]+;/TARGETED_DEVICE_FAMILY = 1;/' "$PBXPROJ"

      - name: CocoaPods install (if Podfile exists)
        run: |
          if [ -f app/platforms/ios/Podfile ]; then
            cd app/platforms/ios
            pod --version
            pod repo update
            pod install
          else
            echo "No Podfile, skipping pods."
          fi

      # -------- SIMULATOR BUILD (no signing) --------
      - name: Build for SIMULATOR (unsigned)
        run: |
          set -o pipefail
          cd app
          cordova build ios --emulator --release --verbose | tee ../build-sim.log

      - name: Extract Info.plist & write metadata (from simulator .app)
        run: |
          APPDIR=$(find app/platforms/ios/build/emulator -type d -name "*.app" | head -n1)
          [ -z "$APPDIR" ] && { echo "Simulator .app not found"; exit 1; }
          PLIST="$APPDIR/Info.plist"
          plutil -convert xml1 -o Info.plist.xml "$PLIST"
          {
            echo "CFBundleIdentifier: " $(/usr/libexec/PlistBuddy -c 'Print :CFBundleIdentifier' "$PLIST")
            echo "CFBundleShortVersionString: " $(/usr/libexec/PlistBuddy -c 'Print :CFBundleShortVersionString' "$PLIST" 2>/dev/null || echo "(none)")
            echo "CFBundleVersion: " $(/usr/libexec/PlistBuddy -c 'Print :CFBundleVersion' "$PLIST" 2>/dev/null || echo "(none)")
            echo "MinimumOSVersion: " $(/usr/libexec/PlistBuddy -c 'Print :MinimumOSVersion' "$PLIST" 2>/dev/null || echo "(none)")
            echo "UIDeviceFamily: " $(/usr/libexec/PlistBuddy -c 'Print :UIDeviceFamily' "$PLIST" 2>/dev/null || echo "(missing)")
            echo "ITSAppUsesNonExemptEncryption: " $(/usr/libexec/PlistBuddy -c 'Print :ITSAppUsesNonExemptEncryption' "$PLIST" 2>/dev/null || echo "(missing)")
          } | tee metadata.txt

      - name: Zip Xcode iOS folder (open later in Xcode)
        run: |
          cd app/platforms
          zip -yr ../../ios-workspace.zip ios
          cd -

      # -------- Only if you asked: DEVICE BUILD + IPA (unsigned) --------
      - name: Build for DEVICE (unsigned)
        if: ${{ inputs.make_ipa }}
        run: |
          set -o pipefail
          cd app
          cordova build ios --device --release --no-sign --buildFlag="CODE_SIGNING_ALLOWED=NO" --verbose | tee ../build-device.log

      - name: Package UNSIGNED .ipa
        if: ${{ inputs.make_ipa }}
        run: |
          APPDIR=$(find app/platforms/ios/build/device -type d -name "*.app" | head -n1)
          [ -z "$APPDIR" ] && { echo "Device .app not found"; exit 1; }
          mkdir -p Payload && cp -R "$APPDIR" Payload/
          zip -yr app-unsigned.ipa Payload
          rm -rf Payload

      # Always upload logs so we can see failures
      - name: Upload artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-output
          path: |
            metadata.txt
            Info.plist.xml
            ios-workspace.zip
            app-unsigned.ipa
            app/build-sim.log
            app/build-device.log
            ~/Library/Logs/DiagnosticReports/**/*.crash
            ~/Library/Logs/**/*.log
          if-no-files-found: ignore
