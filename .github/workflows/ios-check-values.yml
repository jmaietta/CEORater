name: iOS — One-File Build & Check (Cordova, no signing)

on:
  workflow_dispatch:
    inputs:
      make_ipa:
        type: boolean
        default: false
        description: "Also package an UNSIGNED .ipa?"
  push:
    branches: [ appstore ]

env:
  APP_NAME: CEORater
  BUNDLE_ID: com.ceorater.www
  VERSION_NUMBER: "1.0"
  BUILD_NUMBER: "6"

jobs:
  build:
    runs-on: macos-14
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Select Xcode 16.2
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Display tool versions
        run: |
          echo "=== Tool Versions ==="
          xcodebuild -version
          /usr/bin/xcode-select -p
          node -v
          npm -v

      - name: Install Cordova CLI
        run: |
          npm i -g cordova@12
          cordova -v

      - name: Verify source files
        run: |
          echo "=== Verifying source files ==="
          if [ ! -f "index.html" ]; then
            echo "ERROR: No index.html found in repository root"
            ls -la
            exit 1
          fi
          echo "✓ Found index.html"
          echo "Repository contents:"
          ls -la

      - name: Create Cordova project
        run: |
          echo "=== Creating Cordova project ==="
          cordova create app "$BUNDLE_ID" "$APP_NAME"
          
          # Remove default www content
          rm -rf app/www
          mkdir -p app/www

      - name: Configure version and build number
        run: |
          echo "=== Configuring version ==="
          CONFIG="app/config.xml"
          
          # Set version
          /usr/bin/sed -i '' -E "s/version=\"[^\"]+\"/version=\"${VERSION_NUMBER}\"/" "$CONFIG"
          
          # Set iOS build number preference
          if ! grep -q 'ios-CFBundleVersion' "$CONFIG"; then
            /usr/bin/sed -i '' -E "s@</widget>@  <preference name=\"ios-CFBundleVersion\" value=\"${BUILD_NUMBER}\"/>\n</widget>@" "$CONFIG"
          else
            /usr/bin/sed -i '' -E "s/(name=\"ios-CFBundleVersion\" value=\")[^\"]+/\1${BUILD_NUMBER}/" "$CONFIG"
          fi
          
          # Also set android-versionCode for consistency
          if ! grep -q 'android-versionCode' "$CONFIG"; then
            /usr/bin/sed -i '' -E "s@</widget>@  <preference name=\"android-versionCode\" value=\"${BUILD_NUMBER}\"/>\n</widget>@" "$CONFIG"
          fi
          
          echo "✓ Version: ${VERSION_NUMBER}, Build: ${BUILD_NUMBER}"
          
          # Display the config for verification
          echo "=== Config.xml preferences ==="
          grep -E "version=|CFBundleVersion|versionCode" "$CONFIG"

      - name: Copy web files to Cordova project
        run: |
          echo "=== Copying web files ==="
          
          # Copy all files from repo root to app/www, excluding specific items
          rsync -av \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='app' \
            --exclude='node_modules' \
            --exclude='.DS_Store' \
            --exclude='*.log' \
            --exclude='*.md' \
            --exclude='requirements.txt' \
            --exclude='server.js' \
            --exclude='package.json' \
            --exclude='tailwind.config.js' \
            ./ app/www/
          
          # Verify critical files were copied
          if [ ! -f "app/www/index.html" ]; then
            echo "ERROR: Failed to copy index.html"
            ls -la app/www/
            exit 1
          fi
          
          echo "✓ Files copied successfully"
          echo "app/www contents:"
          ls -la app/www/ | head -20

      - name: Configure splash screen and launch images
        run: |
          echo "=== Configuring splash screen and permissions ==="
          cd app
          
          # Add whitelist plugin for network access
          cordova plugin add cordova-plugin-whitelist 2>/dev/null || echo "Note: whitelist plugin may not be needed"
          
          # Install splash screen plugin if not present
          cordova plugin add cordova-plugin-splashscreen || echo "Splash plugin may already be installed"
          
          CONFIG="config.xml"
          
          # Add network permissions
          if ! grep -q '<access origin=' "$CONFIG"; then
            /usr/bin/sed -i '' -E "s@</widget>@  <access origin=\"*\"/>\n  <allow-navigation href=\"*\"/>\n</widget>@" "$CONFIG"
          fi
          
          # Add splash screen preferences
          if ! grep -q 'SplashScreen' "$CONFIG"; then
            /usr/bin/sed -i '' -E "s@</widget>@  <!-- Splash Screen Settings -->\n  <preference name=\"AutoHideSplashScreen\" value=\"true\"/>\n  <preference name=\"SplashScreenDelay\" value=\"3000\"/>\n  <preference name=\"FadeSplashScreen\" value=\"true\"/>\n  <preference name=\"FadeSplashScreenDuration\" value=\"500\"/>\n  <preference name=\"ShowSplashScreenSpinner\" value=\"false\"/>\n  <preference name=\"SplashMaintainAspectRatio\" value=\"true\"/>\n</widget>@" "$CONFIG"
            echo "✓ Splash screen preferences added"
          fi
          
          echo "Installed plugins:"
          cordova plugin ls
          
          cd ..

      - name: Add iOS platform
        run: |
          echo "=== Adding iOS platform ==="
          cd app
          
          # Add iOS platform
          cordova platform add ios@7.1.1
          
          echo "Installed platforms:"
          cordova platform ls
          
          # Remove Podfile to avoid CocoaPods complications
          if [ -f "platforms/ios/Podfile" ]; then
            echo "Removing Podfile to skip CocoaPods..."
            rm -f platforms/ios/Podfile
          fi
          
          # Configure for iPhone-only
          PROJECT_FILE="platforms/ios/${APP_NAME}.xcodeproj/project.pbxproj"
          if [ -f "$PROJECT_FILE" ]; then
            /usr/bin/sed -i '' -E 's/TARGETED_DEVICE_FAMILY = [^;]+;/TARGETED_DEVICE_FAMILY = 1;/' "$PROJECT_FILE"
            echo "✓ Configured for iPhone-only"
          else
            echo "WARNING: project.pbxproj not found"
            find platforms/ios -name "*.pbxproj" -type f
          fi

      - name: Remove CocoaPods and configure build settings
        run: |
          echo "=== Configuring iOS build settings ==="
          cd app/platforms/ios
          
          # Remove CocoaPods files to avoid build complications
          if [ -f "Podfile" ]; then
            echo "Removing CocoaPods files..."
            rm -f Podfile
            rm -f Podfile.lock
            rm -rf Pods/
            echo "✓ CocoaPods files removed"
          fi
          
          # Set build number directly in Info.plist
          PLIST_FILE="${APP_NAME}/${APP_NAME}-Info.plist"
          if [ -f "$PLIST_FILE" ]; then
            echo "Setting build number in Info.plist..."
            
            # Set CFBundleVersion (build number)
            /usr/libexec/PlistBuddy -c "Set :CFBundleVersion ${BUILD_NUMBER}" "$PLIST_FILE"
            
            # Verify it was set
            echo "CFBundleVersion set to: $(/usr/libexec/PlistBuddy -c 'Print :CFBundleVersion' "$PLIST_FILE")"
            
            # Add ITSAppUsesNonExemptEncryption = NO
            /usr/libexec/PlistBuddy -c "Add :ITSAppUsesNonExemptEncryption bool false" "$PLIST_FILE" 2>/dev/null || \
            /usr/libexec/PlistBuddy -c "Set :ITSAppUsesNonExemptEncryption false" "$PLIST_FILE"
            echo "✓ Crypto exemption added"
            
            # Verify all settings
            echo "=== Final Info.plist values ==="
            echo "CFBundleShortVersionString: $(/usr/libexec/PlistBuddy -c 'Print :CFBundleShortVersionString' "$PLIST_FILE")"
            echo "CFBundleVersion: $(/usr/libexec/PlistBuddy -c 'Print :CFBundleVersion' "$PLIST_FILE")"
            echo "ITSAppUsesNonExemptEncryption: $(/usr/libexec/PlistBuddy -c 'Print :ITSAppUsesNonExemptEncryption' "$PLIST_FILE")"
          else
            echo "ERROR: Info.plist not found at expected location"
            find . -name "*Info.plist" -type f
          fi
          
          cd ../../..

      # -------- SIMULATOR BUILD --------
      - name: Build for iOS Simulator
        run: |
          echo "=== Building for iOS Simulator ==="
          cd app
          
          # Build using project file (not workspace since we removed CocoaPods)
          cordova build ios --emulator --release --verbose 2>&1 | tee ../build-sim.log
          
          if [ $? -ne 0 ]; then
            echo "Build failed - check build-sim.log for details"
            exit 1
          fi
          
          echo "✓ Simulator build completed"

      - name: Extract build metadata
        run: |
          echo "=== Extracting build metadata ==="
          
          # Find the simulator app
          SIM_APP=$(find app/platforms/ios/build/emulator -type d -name "*.app" 2>/dev/null | head -n1)
          
          if [ -z "$SIM_APP" ]; then
            # Try alternate location
            SIM_APP=$(find app/platforms/ios/build -type d -name "*.app" 2>/dev/null | head -n1)
          fi
          
          if [ -z "$SIM_APP" ]; then
            echo "WARNING: Simulator app not found"
            echo "Searching for build directories:"
            find app/platforms/ios -type d -name "build" 2>/dev/null
          else
            echo "Found app: $SIM_APP"
            PLIST_FILE="$SIM_APP/Info.plist"
            
            if [ -f "$PLIST_FILE" ]; then
              # Convert to XML
              plutil -convert xml1 -o Info.plist.xml "$PLIST_FILE"
              
              # Extract metadata
              {
                echo "=== App Metadata ==="
                echo "CFBundleIdentifier: $(/usr/libexec/PlistBuddy -c 'Print :CFBundleIdentifier' "$PLIST_FILE" 2>/dev/null || echo "not found")"
                echo "CFBundleShortVersionString: $(/usr/libexec/PlistBuddy -c 'Print :CFBundleShortVersionString' "$PLIST_FILE" 2>/dev/null || echo "not found")"
                echo "CFBundleVersion: $(/usr/libexec/PlistBuddy -c 'Print :CFBundleVersion' "$PLIST_FILE" 2>/dev/null || echo "not found")"
                echo "MinimumOSVersion: $(/usr/libexec/PlistBuddy -c 'Print :MinimumOSVersion' "$PLIST_FILE" 2>/dev/null || echo "not found")"
                echo "UIDeviceFamily: $(/usr/libexec/PlistBuddy -c 'Print :UIDeviceFamily' "$PLIST_FILE" 2>/dev/null || echo "not found")"
                echo "==================="
              } | tee metadata.txt
            fi
          fi

      - name: Create Xcode workspace archive
        run: |
          echo "=== Creating Xcode workspace archive ==="
          if [ -d "app/platforms/ios" ]; then
            cd app/platforms
            zip -yr ../../ios-workspace.zip ios \
              -x "*/build/*" \
              -x "*/DerivedData/*" \
              -x "*/.DS_Store" \
              -x "*/Pods/*"
            cd ../..
            echo "✓ Workspace archive created"
          fi

      # -------- DEVICE BUILD (optional) --------
      - name: Build for Device
        if: ${{ inputs.make_ipa }}
        run: |
          echo "=== Building for iOS Device ==="
          cd app
          
          cordova build ios \
            --device \
            --release \
            --no-sign \
            --buildFlag="CODE_SIGNING_ALLOWED=NO" \
            --verbose 2>&1 | tee ../build-device.log || {
            echo "Device build failed"
            exit 1
          }
          
          echo "✓ Device build completed"

      - name: Package unsigned IPA
        if: ${{ inputs.make_ipa }}
        run: |
          echo "=== Packaging unsigned IPA ==="
          
          # Find device app (not simulator)
          DEVICE_APP=$(find app/platforms/ios/build/device -type d -name "*.app" 2>/dev/null | head -n1)
          
          if [ -z "$DEVICE_APP" ]; then
            # Try alternate location
            DEVICE_APP=$(find app/platforms/ios/build -type d -name "*.app" 2>/dev/null | grep -v emulator | head -n1)
          fi
          
          if [ -z "$DEVICE_APP" ]; then
            echo "ERROR: Device app not found"
            find app/platforms/ios/build -type d
            exit 1
          fi
          
          echo "Found device app: $DEVICE_APP"
          
          # Create IPA
          mkdir -p Payload
          cp -R "$DEVICE_APP" Payload/
          zip -yr app-unsigned.ipa Payload
          rm -rf Payload
          
          echo "✓ Unsigned IPA created"

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-output
          path: |
            metadata.txt
            Info.plist.xml
            ios-workspace.zip
            app-unsigned.ipa
            build-sim.log
            build-device.log
            app/platforms/ios/build/**/*.app
            ~/Library/Logs/DiagnosticReports/**/*.crash
          if-no-files-found: ignore
          retention-days: 7
