name: iOS — One-File Build & Check (Cordova, no signing)

on:
  workflow_dispatch:
    inputs:
      make_ipa:
        type: boolean
        default: false
        description: "Also package an UNSIGNED .ipa?"
  push:
    branches: [ appstore ]

env:
  APP_NAME: CEORater
  BUNDLE_ID: com.ceorater.www
  VERSION_NUMBER: "1.0"   # marketing version
  BUILD_NUMBER: "6"       # CFBundleVersion / android-versionCode

jobs:
  build:
    runs-on: macos-14

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Select Xcode 16.2
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Display tool versions
        run: |
          echo "=== Tool Versions ==="
          xcodebuild -version
          /usr/bin/xcode-select -p
          node -v || true
          npm -v || true

      - name: Install Cordova CLI
        run: |
          npm i -g cordova@12
          cordova -v

      - name: Verify source files
        run: |
          echo "=== Verifying source files ==="
          if [ ! -f "index.html" ]; then
            echo "ERROR: No index.html found in repository root"
            ls -la
            exit 1
          fi
          echo "✓ Found index.html"
          ls -la

      - name: Create Cordova project
        run: |
          echo "=== Creating Cordova project ==="
          cordova create app "$BUNDLE_ID" "$APP_NAME"
          rm -rf app/www && mkdir -p app/www

      - name: Generate minimal config.xml (authoritative for version/build)
        run: |
          echo "=== Writing app/config.xml ==="
          cat > app/config.xml <<EOF
          <?xml version='1.0' encoding='utf-8'?>
          <widget id="${BUNDLE_ID}"
                  version="${VERSION_NUMBER}"
                  ios-CFBundleVersion="${BUILD_NUMBER}"
                  android-versionCode="${BUILD_NUMBER}"
                  xmlns="http://www.w3.org/ns/widgets"
                  xmlns:cdv="http://cordova.apache.org/ns/1.0">
            <name>${APP_NAME}</name>
            <description>${APP_NAME} mobile application</description>
            <author email="support@ceorater.com" href="https://www.ceorater.com">CEORater</author>

            <!-- iPhone-only, portrait (tweak if you need landscape) -->
            <preference name="target-device" value="handset"/>
            <preference name="Orientation" value="portrait"/>

            <!-- Optional: set a modern minimum iOS version if desired -->
            <preference name="deployment-target" value="13.0"/>

            <!-- Ensure crypto exemption lands in Info.plist -->
            <edit-config file="*-Info.plist" mode="merge" target="ITSAppUsesNonExemptEncryption">
              <false/>
            </edit-config>

            <!-- Broad network allowance (tighten for production if needed) -->
            <access origin="*"/>
            <allow-navigation href="*"/>

            <!-- Splash prefs (harmless if you supply your own assets elsewhere) -->
            <preference name="AutoHideSplashScreen" value="true"/>
            <preference name="SplashScreenDelay" value="3000"/>
            <preference name="FadeSplashScreen" value="true"/>
            <preference name="FadeSplashScreenDuration" value="500"/>
            <preference name="ShowSplashScreenSpinner" value="false"/>
            <preference name="SplashMaintainAspectRatio" value="true"/>
          </widget>
          EOF

          echo "— widget line —"
          grep -E '<widget ' app/config.xml

      - name: Copy web files to Cordova project
        run: |
          echo "=== Copying web files ==="
          rsync -av \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='app' \
            --exclude='node_modules' \
            --exclude='.DS_Store' \
            --exclude='*.log' \
            --exclude='*.md' \
            --exclude='requirements.txt' \
            --exclude='server.js' \
            --exclude='package.json' \
            --exclude='tailwind.config.js' \
            ./ app/www/

          if [ ! -f "app/www/index.html" ]; then
            echo "ERROR: Failed to copy index.html"
            ls -la app/www/
            exit 1
          fi

          echo "✓ Files copied"
          ls -la app/www/ | head -20

      - name: Configure plugins and permissions
        run: |
          echo "=== Configuring plugins ==="
          cd app
          cordova plugin add cordova-plugin-whitelist 2>/dev/null || true
          cordova plugin add cordova-plugin-splashscreen 2>/dev/null || true
          cd ..

      - name: Add iOS platform (and set iPhone-only)
        run: |
          echo "=== Adding iOS platform ==="
          cd app
          cordova platform add ios@7.1.1
          cordova platform ls

          # Optional: remove pods to keep things simple
          if [ -f "platforms/ios/Podfile" ]; then
            rm -f platforms/ios/Podfile platforms/ios/Podfile.lock
            rm -rf platforms/ios/Pods/
          fi

          # Force iPhone-only at Xcode project level as a backstop
          PROJECT_FILE="platforms/ios/${APP_NAME}.xcodeproj/project.pbxproj"
          if [ -f "$PROJECT_FILE" ]; then
            /usr/bin/sed -i '' -E 's/TARGETED_DEVICE_FAMILY = [^;]+;/TARGETED_DEVICE_FAMILY = 1;/' "$PROJECT_FILE"
            echo "✓ TARGETED_DEVICE_FAMILY set to iPhone (1)"
          fi

      # -------- SIMULATOR BUILD --------
      - name: Build for iOS Simulator
        run: |
          echo "=== Building for iOS Simulator ==="
          cd app
          # Cordova stamps Info.plist from config.xml — no post-build plist hacks needed
          cordova build ios --emulator --release --verbose 2>&1 | tee ../build-sim.log

      - name: Extract build metadata
        run: |
          echo "=== Extracting build metadata ==="
          SIM_APP=$(find app/platforms/ios/build -type d -name "*.app" ! -path "*/Debug-iphonesimulator/*" 2>/dev/null | head -n1)
          if [ -z "$SIM_APP" ]; then
            SIM_APP=$(find app/platforms/ios/build -type d -name "*.app" 2>/dev/null | head -n1)
          fi

          if [ -n "$SIM_APP" ]; then
            echo "Found app: $SIM_APP"
            PLIST_FILE="$SIM_APP/Info.plist"
            plutil -convert xml1 -o Info.plist.xml "$PLIST_FILE"
            {
              echo "=== App Metadata ==="
              echo "CFBundleIdentifier: $(/usr/libexec/PlistBuddy -c 'Print :CFBundleIdentifier' "$PLIST_FILE" 2>/dev/null || echo "not found")"
              echo "CFBundleShortVersionString: $(/usr/libexec/PlistBuddy -c 'Print :CFBundleShortVersionString' "$PLIST_FILE" 2>/dev/null || echo "not found")"
              echo "CFBundleVersion: $(/usr/libexec/PlistBuddy -c 'Print :CFBundleVersion' "$PLIST_FILE" 2>/dev/null || echo "not found")"
              echo "ITSAppUsesNonExemptEncryption: $(/usr/libexec/PlistBuddy -c 'Print :ITSAppUsesNonExemptEncryption' "$PLIST_FILE" 2>/dev/null || echo "not set")"
              echo "MinimumOSVersion: $(/usr/libexec/PlistBuddy -c 'Print :MinimumOSVersion' "$PLIST_FILE" 2>/dev/null || echo "not found")"
              echo "UIDeviceFamily: $(/usr/libexec/PlistBuddy -c 'Print :UIDeviceFamily' "$PLIST_FILE" 2>/dev/null || echo "not found")"
              echo "==================="
            } | tee metadata.txt
          else
            echo "WARNING: Simulator app not found"
            find app/platforms/ios -type d -name "build"
          fi

      - name: Create Xcode workspace archive (no DerivedData)
        run: |
          echo "=== Creating Xcode workspace archive ==="
          if [ -d "app/platforms/ios" ]; then
            cd app/platforms
            zip -yr ../../ios-workspace.zip ios \
              -x "*/build/*" \
              -x "*/DerivedData/*" \
              -x "*/.DS_Store" \
              -x "*/Pods/*"
            cd ../..
            echo "✓ Workspace archive created"
          fi

      # -------- DEVICE BUILD (optional) --------
      - name: Build for Device (unsigned)
        if: ${{ inputs.make_ipa }}
        run: |
          echo "=== Building for iOS Device (unsigned) ==="
          cd app
          cordova build ios \
            --device \
            --release \
            --no-sign \
            --buildFlag="CODE_SIGNING_ALLOWED=NO" \
            --verbose 2>&1 | tee ../build-device.log

      - name: Package unsigned IPA
        if: ${{ inputs.make_ipa }}
        run: |
          echo "=== Packaging unsigned IPA ==="
          DEVICE_APP=$(find app/platforms/ios/build -type d -name "*.app" 2>/dev/null | grep -vi emulator | head -n1)
          if [ -z "$DEVICE_APP" ]; then
            echo "ERROR: Device app not found"
            find app/platforms/ios/build -type d
            exit 1
          fi
          echo "Found device app: $DEVICE_APP"
          mkdir -p Payload
          cp -R "$DEVICE_APP" Payload/
          zip -yr app-unsigned.ipa Payload
          rm -rf Payload
          echo "✓ Unsigned IPA created"

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-output
          path: |
            metadata.txt
            Info.plist.xml
            ios-workspace.zip
            app-unsigned.ipa
            build-sim.log
            build-device.log
            app/platforms/ios/build/**/*.app
            ~/Library/Logs/DiagnosticReports/**/*.crash
          if-no-files-found: ignore
          retention-days: 7
